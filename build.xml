<project name="aws-tasks" default="test">
	
	<!--
	  Copyright 2010 the original author or authors.
	 
	  Licensed under the Apache License, Version 2.0 (the "License");
	  you may not use this file except in compliance with the License.
	  You may obtain a copy of the License at
	 
	  http://www.apache.org/licenses/LICENSE-2.0
	 
	  Unless required by applicable law or agreed to in writing, software
	  distributed under the License is distributed on an "AS IS" BASIS,
	  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	  See the License for the specific language governing permissions and
	  limitations under the License.
	-->

	<property name="root.dir" value="${basedir}" />
	<property file="${root.dir}/src/build/ant/build.properties" />

	
	
	<!-- ================================================================== -->
	<!-- Classpath 				                                           -->
	<!-- ================================================================== -->
	<path id="compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
		<fileset dir="${lib.dir}/provided">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	<path id="test.classpath">
		<fileset dir="${lib.dir}/test">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	<path id="provided.classpath">
		<fileset dir="${lib.dir}/provided">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	<path id="build.classpath">
		<fileset dir="${lib.dir}/build">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	
	

	<!-- ================================================================== -->
	<!-- General cleaning sources                                           -->
	<!-- ================================================================== -->

	<target name="clean" description="--> clean the project">
		<echo>cleaning ${ant.project.name}</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" excludes="classes-*-eclipse/" />
		</delete>
	</target>
	
	<target name="start-ec2" description="--> start ec2 instance groups">
		<ec2-start name="hadoopCluster" 
			ami="ami-5059be38" 
			instanceCount="5"
			accessKey="${aws.accessKey}"
			accessSecret="${aws.accessSecret}">
			<scp keyfile="${aws.keyfile}">
				<upload localFile="build/dist/b.jar" remotePath="/hadoop/lib/" targetInstances="[0, 1]"/>
				<upload localFile="build/dist/a.jar" remotePath="/hadoop/lib/" targetInstances="all"/>
			</scp>
			<sshExec keyfile="${aws.keyfile}">
				<exec command="/hadoop/bin/start-all.sh" targetInstances="[0, 1]"/>
				<exec comanndFile="src/scripts/init-hadoop.sh" targetInstances="all"/>
			</sshExec>
		</ec2-start>
		
		<ec2-start name="kattaCluster" 
			ami="ami-5059be39" 
			instanceCount="3"
			accessKey="${aws.accessKey}"
			accessSecret="${aws.accessSecret}">
			<sshExec keyfile="${aws.keyfile}">
				<exec command="/katta/bin/start-all.sh" targetInstances="all"/>
			</sshExec>
		</ec2-start>
	</target>

	<target name="stop-ec2" description="--> stop ec2 instance groups">
		<ec2-stop name="hadoopCluster" 
			accessKey="${aws.accessKey}"
			accessSecret="${aws.accessSecret}">
		</ec2-stop>
		<ec2-stop name="kattaCluster" 
			accessKey="${aws.accessKey}"
			accessSecret="${aws.accessSecret}">
			<scp keyfile="${aws.keyfile}">
				<download remoteFile="/katta/logs/a.log" localPath="build/ec2/logs" targetInstances="[all]"/>
			</scp>
		</ec2-stop>
	</target>

	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="compile" description="--> compile main classes">
		<mkdir dir="${build.dir.main-classes}" />
		<javac encoding="${build.encoding}" srcdir="${main.src.dir}" includes="**/*.java" destdir="${build.dir.main-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="compile.classpath" />
		</javac>
		<copy todir="${build.dir.main-classes}">
			<fileset dir="${main.res.dir}"/>
		</copy>
	</target>
	
	
	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="check-header" >
		<exec command="sh src/build/ant/checkHeaders.sh ${basedir}" failonerror="true"/>
	</target>

	
	<!-- ================================================================== -->
	<!-- Unit Tests                                                         -->
	<!-- ================================================================== -->

	<target name="compile-test" depends="check-header,compile">
		<echo>*** Building Unit Tests Sources ***</echo>
		<mkdir dir="${build.dir.test-classes}" />
		<path id="test.path">
			<pathelement location="${build.dir.main-classes}" />
		</path>

		<javac encoding="${build.encoding}" srcdir="${test.src.dir}" includes="**/*.java" destdir="${build.dir.test-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.classpath" />
			<classpath refid="compile.classpath" />
			<classpath refid="test.path" />
		</javac>
		<javac encoding="${build.encoding}" srcdir="${it.src.dir}" includes="**/*.java" destdir="${build.dir.test-classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.classpath" />
			<classpath refid="compile.classpath" />
			<classpath refid="test.path" />
		</javac>
	</target>
	
	<target name="test" depends="unit, it" description="--> run unit &amp; integration tests" />

	<target name="unit" description="--> run unit tests">
		<antcall target="runTests" >
			<param name="test.batch.dir" value="${test.src.dir}" />
		</antcall>
	</target>
	
	<target name="it">
		<property name="ec2.properties" value="${it.res.dir}/ec2.properties"/>
		<available file="${ec2.properties}" property="ec2.configured" value="true"/>
		<fail unless="ec2.configured" message="please create and edit ${ec2.properties} to run integration tests (see ${ec2.properties}.template)"/>

        <antcall target="runTests">
            <param name="build.dir.test-reports" value="${build.dir.it-reports}" />
            <param name="build.dir.test-classes" value="${build.dir.it-classes}" />
            <param name="test.res.dir" value="${it.res.dir}" />
        	<!--<param name="test.src.dir" value="${it.src.dir}" />-->
        	<param name="test.batch.dir" value="${it.src.dir}" />
        </antcall>
    </target>
	
	<target name="runTests" depends="compile-test" description="--> run unit &amp; integration tests">
		<delete dir="${build.dir.test-reports}" />
		<mkdir dir="${build.dir.test-reports}" />

		<junit showoutput="false" printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m" dir="${basedir}" errorProperty="tests.failed" failureProperty="tests.failed">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/aws-tasks.ser" />
			<classpath>
				<pathelement location="${instrumented.dir}" />
				<pathelement location="${build.dir.main-classes}" />
				<pathelement location="${build.dir.test-classes}" />
				<pathelement location="${test.res.dir}" />
				<pathelement location="${main.res.dir}" />
				<path refid="test.classpath" />
				<path refid="compile.classpath" />
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build.dir.test-reports}" unless="testcase">
				<fileset dir="${test.batch.dir}">
					<include name="**/*Test.java" unless="testcase" />
					<exclude name="**/Abstract*.java" unless="testcase" />
					<include name="${testcase}" if="testcase" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${build.dir.test-reports}" if="testcase">
				<fileset dir="${test.batch.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>
		<fail if="tests.failed">Tests failed!</fail>
	</target>
	
	<!-- ================================================================== -->
	<!-- Build jar from sources                                             -->
	<!-- ================================================================== -->

	<target name="jar" depends="compile">

		<tstamp>
			<format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
		</tstamp>

		<!-- git version -->
		<exec outputproperty="build.current.revision" executable="git">
          <arg line=" log -1 --pretty=format:%H" />
		</exec>
		<echo>Git Revision: ${build.current.revision}</echo>

		<jar jarfile="${build.dir}/${jar.name}" basedir="${build.dir.main-classes}">
			<manifest>
				<section name="aws-tasks">
					<attribute name="Implementation-Vendor" value="???" />
					<attribute name="Implementation-Title" value="${ant.project.name}" />
					<attribute name="Implementation-Version" value="${version}" />
					<attribute name="Compile-Time" value="${timestamp}" />
					<attribute name="Compiled-By" value="${user.name}" />
					<attribute name="Git-Revision" value="${build.current.revision}" />
				</section>
			</manifest>
		</jar>
	</target>


	
	<!-- ================================================================== -->
	<!-- Java Doc                                                           -->
	<!-- ================================================================== -->

	<target name="doc" depends="compile" description="--> create javadoc">
		<mkdir dir="${build.javadoc}" />
		<javadoc packagenames="${javadoc.package}" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${name} ${version} API" doctitle="${name} ${version} API" bottom="Copyright &amp;copy; ${javadoc.year} ???">
			<packageset dir="${main.src.dir}" />
			<link href="${javadoc.link.java}" />
			<classpath>
				<path refid="compile.classpath" />
			</classpath>
			<group title="${javadoc.title}" packages="${javadoc.package}*" />
		</javadoc>
	</target>



	<!-- ================================================================== -->
	<!-- Generating eclipse file                                            -->
	<!-- ================================================================== -->


	<target name="eclipse" depends="clean-eclipse" description="--> create the Eclipse project files">

		<taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" classpathref="build.classpath" />
		<mkdir dir="${build.dir.main-classes-eclipse}" />
		<mkdir dir="${build.dir.test-classes-eclipse}" />
		<mkdir dir="${build.dir.it-classes-eclipse}" />
		<eclipse>
			<settings>
				<jdtcore compilercompliance="6.0" />
				<resources encoding="UTF-8" />
			</settings>
			<project name="${ant.project.name}" />
			<classpath>
				<container path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" />

				<source path="${basedir}/src/main/java" output="${build.dir.main-classes-eclipse}" />
				<source path="${basedir}/src/main/resources" output="${build.dir.main-classes-eclipse}" />
				<source path="${basedir}/src/test/java" output="${build.dir.test-classes-eclipse}" />
				<source path="${basedir}/src/test/resources" output="${build.dir.test-classes-eclipse}" />
				<source path="${basedir}/src/it/java" output="${build.dir.it-classes-eclipse}" />
				<source path="${basedir}/src/it/resources" output="${build.dir.it-classes-eclipse}" />

				<output path="${build.dir.main-classes-eclipse}" />
				<library pathref="test.classpath" exported="false" />
				<library pathref="compile.classpath" />
			</classpath>
		</eclipse>
		<concat destfile="${root.dir}/.settings/org.eclipse.jdt.core.prefs" append="true">
			<filelist dir="${root.dir}/src/build/eclipse/" files="eclipse-formatter" />
		</concat>
		<copy file="${root.dir}/src/build/eclipse/org.eclipse.jdt.ui.prefs" todir="${root.dir}/.settings" />
		<replace file="${root.dir}/.settings/org.eclipse.jdt.core.prefs" token="org.eclipse.jdt.core.compiler.compliance=6.0" value="org.eclipse.jdt.core.compiler.compliance=1.6" />
		<replaceregexp file=".classpath" match="path=&quot;(.*).jar&quot;" replace="path=&quot;\1.jar&quot; sourcepath=&quot;\1-sources.jar&quot;" flags="g" />
	</target>

	<target name="clean-eclipse" description="--> clean the Eclipse project files">
		<delete file=".classpath" />
		<delete file=".eclipse" />
		<delete file=".project" />
		<delete dir=".settings" />
	</target>

	<target name="clean-all">
		<antcall target="clean" />
	</target>

</project>
